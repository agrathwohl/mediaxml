#!/usr/bin/env node

const { inspect } = require('util')
const { Parser } = require('../')
const chromafi = require('@12core/chromafi')
const debug = require('debug')('scte236')
const path = require('path')
const pkg = require('../package.json')
const fs = require('fs')

const argv = require('minimist')(process.argv.slice(2), {
  alias: {
    h: ['help'],
    i: ['inspect'],
    D: ['debug'],
    V: ['version'],
  },

  boolean: [
    'version',
    'inspect',
    'debug',
    'help'
  ]
})

if (argv.help) {
  console.log('usage: scte236 [-hiDV] [options] <filename> [query]')
  console.log('')
  console.log('options:')
  console.log('  -i, --inspect   Show inspected output')
  console.log('  -h, --help      Show this message')
  console.log('  -D, --debug     Show debug output')
  console.log('  -V, --version   Show program version')
  console.log('')
  console.log('arguments:')
  console.log('  <filename>      Path to XML file in ADI1 or ADI3 format (required)')
  console.log('  [query]         Query in JSONata syntax on resulting model [optional]')
  console.log('')
  console.log('examples:')
  console.log('  scte236 ./tvshow.xml "adi.children.metadata"')
  console.log('')
  process.exit(0)
}

if (argv.version) {
  console.log(pkg.version)
  process.exit(0)
}

if (argv.debug) {
  require('debug').enable('scte236')
  debug('Debug output enabled')
}

const filename = path.resolve(process.cwd(), argv._[0])
const stream = fs.createReadStream(filename)
const parser = new Parser()

stream.pipe(parser.createWriteStream())
  .on('error', (err) => {
    console.error('error: %s', err.message)
    debug(err.stack || err)
  })
  .on('finish', () => {
    const result = parser.query(argv._[1] || '', {
      inspect: Boolean(argv.inspect)
    })

    if (result && argv.inspect && inspect.custom in result) {
      const output = chromafi(result[inspect.custom]().trim(), {
        consoleTabWidth: 2,
        lineNumberPad: 0,
        tabsToSpaces: 8,
        lineNumbers: false,
        stripIndent: false,
        codePad: 0,
        lang: 'xml'
      })

      console.log('\n%s', output.trim())
    } else {
      console.log(result)
    }
  })
