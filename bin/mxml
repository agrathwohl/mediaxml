#!/usr/bin/env node

process.title = 'mxml'

const { pretty } = require('../repl/pretty')
const debug = require('debug')('mediaxml')
const chalk = require('chalk')
const repl = require('../repl')
const pkg = require('../package.json')
const fs = require('fs')

const argv = require('minimist')(process.argv.slice(2), {
  '--': true,
  alias: {
    h: ['help'],
    i: ['inspect'],
    D: ['debug'],
    j: ['json'],
    P: ['pretty'],
    R: ['repl'],
    T: ['timing'],
    V: ['version'],
    W: ['watch'],
  },

  default: {
    'no-preview': false,
    preview: true,
    pretty: true
  },

  boolean: [
    'debug',
    'dump-assignments',
    'dump-imports',
    'dump-lets',
    'inspect',
    'help',
    'json',
    'no-preview',
    'pretty',
    'preview',
    'repl',
    'timing',
    'version',
    'watch',
  ]
})

if (argv.help) {
  process.stdout.write('usage: mxml [-hiDRTV] [options] <filename> [query]\n')
  process.stdout.write('\n')
  process.stdout.write('options:\n')
  process.stdout.write('  -h, --help         Show this message\n')
  process.stdout.write('  -i, --inspect      Show inspected output\n')
  process.stdout.write('  -D, --debug        Show debug output\n')
  process.stdout.write('  -j, --json         Convert output to JSON\n')
  process.stdout.write('  -P, --pretty       Show pretty output (default in most cases)\n')
  process.stdout.write('  -R, --repl         Launch program REPL\n')
  process.stdout.write('  -T, --timing       Show query timing debug output\n')
  process.stdout.write('  -V, --version      Show program version\n')
  process.stdout.write('  -W, --watch        Watch for changes (REPL context only)\n')
  process.stdout.write('      --dump-lets    Dumps all "let" assignments (let <key> = <value>;)\n')
  process.stdout.write('      --dump-imports Dumps all imports\n')
  process.stdout.write('\n')
  process.stdout.write('arguments:\n')
  process.stdout.write('  <filename>      Path to XML file (required)\n')
  process.stdout.write('  [query]         Query in JSONata syntax on resulting model [optional]\n')
  process.stdout.write('\n')
  process.stdout.write('examples:\n')
  process.stdout.write('  ## read ADI metadata\n')
  process.stdout.write('  mxml ./tvshow.xml \'adi:children [name="metadata"]\'\n')
  process.stdout.write('\n')
  process.stdout.write('  ## look for ADI3 "Movie" assets\n')
  process.stdout.write('  mxml ./movie.xml \'adi3:children [`xsi:type`="content:MovieType"]\'\n')
  process.stdout.write('\n')
  process.exit(0)
}

if (argv.version) {
  process.stdout.write(pkg.version)
  process.stdout.write('\n')
  process.exit(0)
}

if (argv.debug) {
  require('debug').enable('mediaxml')
  debug('Debug output enabled')
}

let [ arg0, query = arg0 ] = argv._

process.on('uncaughtException', debug)
process.on('unhandledRejection', debug)

if ('-' === argv._[0] || !process.stdin.isTTY) {
  const ondata = (data) => bytes.push(data)
  const bytes = []
  process.stdin.on('data', ondata)
  process.stdin.once('end', () => process.stdin.removeListener('data', ondata))

  if (query && '-' !== query) {
    process.stdin.once('end', () => {
      evaluate(Buffer.concat(bytes), query)
    })
  } else if (!process.stdin.isTTY) {
    console.error(' %s:', chalk.bold(chalk.yellow('warn')), 'stdin is not a TTY and no query was given')
    process.stdin.once('end', () => {
      evaluate(Buffer.concat(bytes), '$')
    })
  }
} else if (arg0) {
  loadFile(arg0)
} else {
  startRepl()
}

function startRepl() {
  repl.start({
    onerror: console.error,
    preview: true !== argv['no-preview'] && false !== argv.preview,
    timing: argv.timing,
    debug: argv.debug,
    argv: [argv._[0], ...argv['--']]
  })
}

function loadFile(filename) {
  const context = repl.createContext({
    onerror: console.error,
    preview: true !== argv['no-preview'] && false !== argv.preview,
    timing: argv.timing,
    debug: argv.debug,
    argv: [argv._[0], ...argv['--']]
  })

  context.parser
    .then(() => context.parser.query(`import "${filename}"`, context))
    .then((result) => {
      if (query && query !== filename) {
        return context.parser.query(query, context)
      } else {
        return result || context.parser.rootNode
      }
    })
    .then((result) => onresult(context, result))
    .then((result) => {
      let output = null
      if (result) {
        if (argv.json) {
          if (argv.pretty) {
            process.stdout.write(JSON.stringify(result, null, '  '))
            process.stdout.write('\n')
          } else {
            process.stdout.write(JSON.stringify(result))
          }
          return
        } else if (false !== argv.pretty) {
          output = pretty(result)
          if (output) {
            process.stdout.write(output)
            process.stdout.write('\n')
          }
        } else {
          console.log(result)
        }
      }

      if (argv.repl) {
        context.start()
      }
    })
    .catch((err) => {
      context.log.debug(err.stack || err)
      context.log.error(err.message)
    })
}

function evaluate(source, query) {
  const context = repl.createContext(source, {
    onerror: console.error,
    preview: true !== argv['no-preview'] && false !== argv.preview,
    timing: argv.timing,
    debug: argv.debug,
    argv: [argv._[0], ...argv['--']]
  })

  context.parser
    .then(() => context.parser.query(source, context))
    .then((result) => query ? context.parser.query(query, context) : result)
    .then((result) => onresult(context, result))
    .then((result) => {
      let output = null
      if (result) {
        if (argv.json) {
          if (argv.pretty) {
            process.stdout.write(JSON.stringify(result, null, '  '))
            process.stdout.write('\n')
          } else {
            process.stdout.write(JSON.stringify(result))
          }
          return
        } else if (false !== argv.pretty) {
          output = pretty(result)
          if (output) {
            process.stdout.write(output)
            process.stdout.write('\n')
          }
        } else {
          console.log(result)
        }
      }

      if (argv.repl) {
        context.start()
      }
    })
    .catch((err) => {
      context.log.debug(err.stack || err)
      context.log.error(err.message)
    })
}

async function onresult(context, result) {
  if (argv['dump-lets'] || argv['dump-assignments']) {
    result = context.assignments.toJSON()
  } else if (argv['dump-imports']) {
    result = context.imports.toJSON()
  }

  return result
}
